%!PS-Adobe-2.0 EPSF-1.2%%Title: prozesszustände%%Creator: CLARIS EPSF Export Filter V1.0%%CreationDate:10/15/97  12:50:04 a.m.%%BoundingBox: 20 604 310 784                                                                          %%QDBoundingBox: 20.681 8.003 309.665 187.586                                                            %%DocumentFonts: Helvetica%%DocumentProcessColors: Cyan Magenta Yellow Black%%ObjectsIncluded: tText=T tLine=T tRect=T tRRect=F tOval=T tArc=F tFree=F tPoly=F tBMap=F tNote=F tBez=F tPMap=F %%AttributesIncluded: kBaWPattType=T kPixPattType=F kGradientType=F %%EndComments/MAV 300 dict defMAV begin /useClip true def /top    0 def /left   1 def /bottom 2 def /right  3 def /CM     6 array def /CTM    6 array def /CTMR   6 array def /MTC    6 array def /blimit 1500 def /bcnt   0 def /rbox 8 array def /segbox 8 array def /bbox1 4 array def /c1 3 array def /c2 3 array def /d 3 array def    /delta 3 array def /mycurrentrgbcolor 3 array def /ulx 0 def /uly 1 def /llx 2 def /lly 3 def /urx 4 def /ury 5 def /lrx 6 def /lry 7 def /sp [0 0] def /ep [0 0] def /bbox 4 array def /pbox 4 array def /scrnProc currentscreen 3 1 roll pop pop def/currentcolorscreen where {begincurrentcolorscreenend3 1 roll pop pop 4 2 roll pop pop 5 -2 roll pop pop 6 -2 roll pop pop /kProc exch def /bProc exch def /gProc exch def /rProc exch def } if /Max {2 copy gt {pop}{exch pop} ifelse} bind def/Min {2 copy lt {pop}{exch pop} ifelse} bind def/cellPenW 72.0 /currentcolorscreen where{begin currentcolorscreen end pop pop10 1 roll pop pop 8 1 roll pop pop 6 1 roll pop pop Max Max Max }{currentscreen pop pop} ifelse div 2.0 div def%%BeginProcSet : rect /rect {  /saveobj save def  R PC PF LC SS  saveobj restore } bind def %%EndProcSet %%BeginProcSet : R /R {  newpath pbox astore pop 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate /objectCord mstore def pbox right get 2 div dup pbox left get exch sub pbox left 3 -1 roll put  dup pbox right 3 -1 roll put pbox bottom get 2 div  dup pbox top get exch sub pbox top 3 -1 roll put dup pbox bottom 3 -1 roll put translate  CTM currentmatrix pop 57.3 mul rotate RT} bind def%%EndProcSet%%BeginProcSet : SaveScreenBW /SaveScreenBW { currentscreen /scrnProc exch def /scrnAngle exch def /scrnFreq exch def } bind def%%EndProcSet%%BeginProcSet : RestoreScreenBW /RestoreScreenBW { scrnFreq scrnAngle MAV /scrnProc get setscreen } bind def%%EndProcSet%%BeginProcSet : SetFreqAngleBW /SetFreqAngleBW { currentscreen 3 1 roll pop pop setscreen } bind def%%EndProcSet%%BeginProcSet : SaveScreenColor  /SaveScreenColor { currentcolorscreen /grayProc exch def /grayAngle exch def /grayFreq exch def /bProc exch def /bAngle exch def /bFreq exch def /gProc exch def /gAngle exch def /gFreq exch def /rProc exch def /rAngle exch def /rFreq exch def } bind def%%EndProcSet%%BeginProcSet : RestoreColorScreen /RestoreColorScreen { rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen } bind def%%EndProcSet%%BeginProcSet : SetFreqAngleColor /SetFreqAngleColor {  currentcolorscreen  3 1 roll pop pop 4 2 roll pop pop 5 -2 roll pop pop 6 -2 roll pop pop 4 1 roll  6 1 roll  8 1 roll  10 1 roll  setcolorscreen  } bind def %%EndProcSet /initmsaverestore { userdict begin /mdict 10 dict def mdict begin /mindex -1 def /mstacksize 25 def /mstack mstacksize array def /incmindex { /mindex mindex 1 add def } bind def /decmindex { /mindex mindex 1 sub def } bind def /checkmindex { mindex 0 lt { (%ERROR: msave/mrestore stack underflow: Offending command 'mrestore') print flush stop } { mindex mstacksize ge { (%ERROR: msave/mrestore stack overflow: Offending command 'msave') print flush stop } if } ifelse } bind def /mpush { incmindex checkmindex mstack mindex 3 -1 roll put } bind def /mpop { checkmindex mstack mindex get decmindex } bind def end end } bind def /msave { mdict begin matrix currentmatrix mpush end } bind def /mrestore { mdict begin mpop setmatrix end } bind def /msavelevel { mdict begin mindex 1 add end } bind def /mstore {matrix currentmatrix} bind def/AutoSizeY {0 0 pldup 3 1 roll4 -1 roll  addpl exch popexch sub} bind def/pl {  transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} bind def/pll {transformround exchround exchitransform} bind def/pr { dtransformround exchround exchidtransform} bind def/m { pl  moveto} bind def/l { pl lineto} bind def/c { pl curveto} bind def/rm { pr rmoveto} bind def/rl { pr rlineto} bind def/ar { 5 -2 roll pl5 2 rollarc} bind def/an { 5 -2 roll pl5 2 rollarcn} bind def/MakePatternFont {/FontDict 20 dict defFontDict begin/FontName exch def/Encoding exch def/FontMatrix [1 0 0 1 0 0 ] def/FontType 3 def/FontBBox [ 0 0 1 1 ] def/PatternDict exch def/RenderPattern {patternDict exch getexec} bind def/BuildChar {exch begin1 0 0 0 1 1 setcachedeviceEncoding exch get RenderPatternend} bind defFontName FontDict definefont popend} bind def/SnapToPattenGrid	{	exch	dup 0 lt {		1 index sub	} if	1 index	div truncate	mul} bind def/FillPatternString {dup length1 sub0 1 3 -1 roll {2 index2 index3 -2 rollput} forpop pop} bind def/AutoSizeY {	0.0 exch dtransform	round	idtransform exch pop} bind def /AutoSizeX {	0.0 dtransform	exch	round	exch	idtransform pop} bind def /AutoCellSize {	AutoSizeY	exch	AutoSizeX	exch} bind def/CheckPath {	false	{ pop pop pop true exit}	{ pop pop pop true exit}	{ pop pop pop pop pop pop pop true exit}	{ pop true exit}	pathforall} bind def/PatternFill {					%		patternCharacter	/patternString 1 string def	/cm mstore def	patternMatrix setmatrix	1 1 AutoCellSize	dup 0 eq { pop 1} if	exch	dup 0 eq { pop 1} if	exch	/patternSize exch 24.0 mul def	/PatternSizeX exch 24.0 mul patternString length mul def	/flaterror 0 def	patternString FillPatternString	gsave		flaterror 1 add setflat		flattenpath		pathbbox	grestore	psy add flaterror add psy SnapToPattenGrid	exch psx add flaterror add psx SnapToPattenGrid	3 -1 roll flaterror sub psy SnapToPattenGrid	4 -1 roll flaterror sub psx SnapToPattenGrid	4 2 roll pll	4 2 roll pll	/llxsnap exch def	/llysnap exch def	/urxsnap exch def	/urysnap exch def	gsave		useClip true eq {clip}{eoclip} ifelse newpath		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont		llysnap patternSize urysnap {			llxsnap exch moveto			llxsnap PatternSizeX urxsnap {				pop				patternString show				%currentpoint am			} for		} bind for	grestore	cm setmatrix} bind def				%		End 'PatternFill'/DefaultPatternFont {	/cm mstore def	patternMatrix setmatrix	1 1 AutoCellSize	dup 0 eq { pop 1} if	exch	dup 0 eq { pop 1} if	exch	/psy exch iSizeY mul def	/psx exch iSizeX mul def	/patternDict 64 dict def	patternDict begin		/NotDef {} def		/LiteDiagLines {			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]			{pat}			imagemask		} bind def	end	/CustEncoding 256 array def	0 255 1 {		CustEncoding exch /NotDef put	} bind for	CustEncoding 65 /LiteDiagLines put	patternDict CustEncoding /PatternFont MakePatternFont	/pathSegProc {		strokepath		CheckPath {			65 PatternFill newpath		} if	} bind def	cm setmatrix} bind def/XRound {	dup	3 -1 roll	exch mul round	exch div} bind def/RoundMatrix {	/i 0 def	dup {		100000.0 XRound		1 index		exch i exch put		/i i 1 add def	} forall} bind def/GetBoxesRatio {3 -1 roll sub7 1 rollexch sub6 1 roll3 -1 roll sub5 1 rollexch sub4 1 roll3 -1 roll div3 1 rollexch divexch} bind def%%BeginProcSet : Text Attributes Procs/T {792 exch sub} bind def/sx 0 def/sy 0 def/ex 0 def/ey 0 def/lw  0 def/siz 0 def/U {gsave 0 setlinecap/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch deffontkind plain eq  {  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke } {   currentdict /outlineFontSize known outlineFontSize 0 gt and     {       fontkind outline eq         {           /sy sy 0.0119444 siz mul sub def           /ey ey 0.0119444 siz mul sub def           gsave            1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke           grestore           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto           strokepath 0.0119444 siz mul setlinewidth stroke         } if       fontkind shadow eq fontkind outlineshadow eq or         {           /sy sy 0.0358332 siz mul sub def           /ey ey 0.0358332 siz mul sub def           lw setlinewidth           lw 2 div sx add sy           lw 2 div sub moveto           lw 2 div ex add ey           lw 2 div sub lineto stroke            gsave           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke           grestore           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto           strokepath 0.0119444 siz mul setlinewidth stroke         } if      } if } ifelsegrestore} bind def/plain 1 def/outline 2 def/shadow 3 def/outlineshadow 4 def/fess {	currentdict /outlineFontSize known {		/outlineFontSize 2 index def	} if	findfont exch dup /siz exch def scalefont setfont} bind def/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def/S {fontkind plain eq {neg moveto show} iffontkind outline eq {neg /y exch def /x exch def /c exch def NRML} iffontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} iffontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if} bind def/F {/fontkind exch deffontkind plain eq {fess} iffontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} iffontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} iffontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if} bind def/makeoutlinedict 15 dict def/makeoutlinefont {  makeoutlinedict begin   /uniqueid exch def   /strokewidth exch def   /newfontname exch def   /basefontname exch def   FontDirectory basefontname known not {    /basefontname /Times-Roman def   } if   /basefontdict basefontname findfont def   /numentries basefontdict maxlength 1 add def   basefontdict /UniqueID known not   {/numentries numentries 1 add def} if   /outfontdict numentries dict def   basefontdict   {     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse	  }forall   outfontdict /FontName newfontname put   outfontdict /PaintType 2 put   outfontdict /StrokeWidth strokewidth put   outfontdict /UniqueID uniqueid put   newfontname outfontdict definefont pop  end  }def/UID { findfont dup /UniqueID known  {/UniqueID get 1 add}  {pop 1}  ifelse} def/OLF {dup/Outline1000 62 div4 -1 rollUID/outlineFontSize 5 index defmakeoutlinefont/Outline findfont exch scalefont setfont} def/CopyEncoding {findfont/Encoding getdup length array/tarrayz exch deftarrayz 03 -1 rollputintervaltarrayz} bind def/Re-encode {dup length array copy/eap 0 defexch {dup type /integertype eq {/eap exch def} {1 indexexcheap exchput/eap eap 1 add def} ifelse} forall} bind def/EncodeFont	{findfont duplength dictbegin{	1 index /FID ne{ def }{ pop pop } ifelse} forall/FontName exch def/Encoding exch defFontName currentdictenddefinefont pop} bind def%%EndProcSet%%BeginProcSet : clip2pathbbox/clip2pathbbox {	/magicNum linewidth 2 div 1 2 sqrt div mul def	pathbbox	/urymn exch magicNum add def	/urxmn exch magicNum add def	/llymn exch magicNum sub def	/llxmn exch magicNum sub def	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto	closepath clip newpath} bind def%%EndProcSet %% Line takes the following arguments:%% linewidth xEnd yEnd xStart yStart%%BeginProcSet : Line/Line {MAV /LC get length 0 ne{	gsave			newpath			MAV /ArrowType get length 0 eq			MAV /SD get length 0 eq and			{2 setlinecap /UseClip {clip2pathbbox} def }			{0 setlinecap /UseClip {} def } ifelse			0 792 translate			1 -1 scale			CTM currentmatrix pop			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}			{xStart yStart moveto xEnd yEnd lineto} ifelse			linewidth setlinewidth SD strokepath			CheckPath {LC PF ArrowType} if	grestore}{pop pop pop pop pop} ifelse} bind def%% Line takes the following arguments:%% linewidth xEnd yEnd xStart yStart%%BeginProcSet : ZeroLine/ZeroLine {	gsave		newpath		MAV /ArrowType get length 0 ne {			/UseClip {} def			0 792 translate			1 -1 scale			pop pop pop pop pop			CTM currentmatrix pop			ArrowType		} if	grestore} bind def/CompensateForStroke {	sin currentlinewidth mul	exch	cos currentlinewidth mul	dup 0 translate	4 -1 roll exch 2.0 mul sub	3 1 roll	2.0 mul sub} bind def/arrowdict 10 dict defarrowdict begin	/SwallowTail {		newpath		0.0 0.0 moveto		1.0 -.5 lineto		.666 0.0 lineto		1.0 .5 lineto		closepath	} bind def	/Triangular {		newpath		0.0 0.0 moveto		1.0 -.5 lineto		1.0 .5 lineto		closepath	} bind def	/OpenTri {		newpath		1.0 0.5 moveto		0.0 0.0 lineto		1.0 -0.5 lineto	} bind def	/ClosedTri {		newpath		1.0 0.5 moveto		0.0 0.0 lineto		1.0 -0.5 lineto		closepath	} bind def	/SlashBar {		newpath		0.5 -.5 moveto		-.5 0.5 lineto	} bind def	/Dot {		newpath		0.5 0.0 moveto		0 0 1 0 360 arc		closepath	} bind def	/ExtSlashBar {		newpath		1.0 -.5 moveto		0.0 0.5 lineto	} bind defend/ScaleArrowHead {	0 0 4 -2 roll	0 0 1 1	8 -4 roll GetBoxesRatio	scale} bind def/DrawArrowHead {	gsave	[] 0 setdash	currentpoint translate rotate	{		4 copy		gsave			initmatrix			100 200 translate			msave				ScaleArrowHead pop				arrowdict exch get exec			mrestore			strokepath			0 0 3 index 3 index			pathbbox 8 4 roll			GetBoxesRatio			4 2 roll		grestore		3 index 1.0 exch sub		6 -1 roll		{			2 index mul			0 translate		}{			pop		} ifelse		msave			ScaleArrowHead scale			arrowdict exch get exec		mrestore		strokepath	} {		msave		ScaleArrowHead		arrowdict exch get exec		mrestore	} ifelse		CheckPath {			LC PF		} if	grestore} bind def%%EndProcSet %%BeginProcSet : SR /SR {  pbox left get pbox top get moveto  pbox right get pbox top get lineto  pbox right get pbox bottom get lineto  pbox left get pbox bottom get lineto  closepath} bind def %%EndProcSet %%BeginProcSet : E/E {1.415 setmiterlimitCM currentmatrix poppbox right get pbox left get sub abs duppbox bottom get pbox top get sub abs dup 3 -1 rolllt {exch dup 3 -1 roll exch div 1 exch}{dup 3 -1 roll exch div 1} ifelse scale 0 0 3 -1 roll 2 div 0 360 arc closepathCM setmatrix} bind def%%EndProcSet/StripFromFront { dup length2 index sub3 1 rollexch 3 -1 rollgetinterval} bind def/MakePathArray {  /k 0 def  {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall  k array /k 0 def  {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def}  {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def}  {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def}  {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} pathforall }bind def /MakeFlatPathArray { /k 0 def {/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall k array/k 0 def {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} { pop pop pop pop pop pop} {} pathforall }bind def /FractionalLine {2 index sub.00001 mulexch3 index sub.00001 mul4 -1 roll add3 1 rolladd} bind def/calcLineLength { exch 4 -1 roll sub dup mul 3 1 roll exch sub dup mul add sqrt} bind def/InitTotalLineLength { /oldY exch def /oldX exch def theDash aload pop currentLineLength add setdash} bind def/AccumeLineLength { 3 copy pop 2 copy oldX oldY 4 2 roll calcLineLength /segmentLength exch def /currentLineLength currentLineLength segmentLength add def /oldY exch def /oldX exch def} bind def/DecumeLastLineLength { /currentLineLength currentLineLength segmentLength sub def} bind def/DrawFlattendSegment { /pointCount 2 def dup 0 lt { pop 0 } if fpc 3 1 roll 2 index 1 index gt { 2 copy get dup length dup 3 eq { pop dup 0 get exch 1 get 2 copy InitTotalLineLength   m } { } ifelse } { pop 1 index } ifelse dup 1 add 3 index exch sub dup 10 gt { pop 10} if { 1 add 2 copy get aload pop AccumeLineLength exec } repeat 3 1 roll pop pop DecumeLastLineLength} bind def/IncFPC { fpc add /fpc exch def} bind def/DrawFlatPathArray { fpc 0 {  dup 2 index 1 sub lt {  flatPathArray exch newpath 1 sub DrawFlattendSegment gsave pathSegProc grestore newpath } { pop pop exit } ifelse } loop} bind def/RecordFirstSubSegment { closepathArray 0 pathArray 0 get put closepathArray 1 pathArray 0 get aload pop pop pathArray 1 get dup length 3 eq { aload pop pop } { newpath 0 0 moveto aload pop exec /segmentArray flattenpath MakeFlatPathArray def segmentArray 1 get aload pop pop } ifelse FractionalLine {lineto} 3 array astore put} bind def/AppendClosePath { closepathArray 0 get 2 {lineto} put flatPathArray fpc closepathArray 0 get put 1 IncFPC flatPathArray fpc closepathArray 1 get put 1 IncFPC} bind def/RecordCurrentDash { /theDash currentdash 2 array astore def /currentLineLength 0 def} bind def/PatternStroke {	0 setlinecap RecordCurrentDash /saveFlat currentflat def .5 setflat /pathArray MakePathArray def /closepathArray 2 array def /pathLength pathArray length def /flatPathArray 513 array def /currentLineLength 0 def /fpc 0 def pathArray pathLength 1 sub get length 1 eq { /usingClosepath true def RecordFirstSubSegment /pathLength pathLength 1 sub def } { /usingClosepath false def } ifelse 0 1 pathLength 1 sub { pathArray exch get dup length 3 eq { fpc 1 add 512 ge { DrawFlatPathArray fpc 2 ge { flatPathArray flatPathArray fpc 2 sub get 0 put flatPathArray flatPathArray fpc 1 sub get 1 put /fpc 2 def }{ /fpc 0 def } ifelse } if flatPathArray exch fpc exch put 1 IncFPC } { dup length 7 eq { newpath /nToStrip 0 def fpc 1 gt { flatPathArray fpc 2 sub get aload pop pop m flatPathArray fpc 1 sub get aload pop exec /nToStrip 2 def } { fpc 1 eq { flatPathArray fpc 1 sub get aload pop exec /nToStrip 2 def } if } ifelse aload pop exec /segmentArray flattenpath MakeFlatPathArray def /segmentArray nToStrip segmentArray StripFromFront def segmentArray length fpc add 512 lt { flatPathArray fpc segmentArray putinterval segmentArray length IncFPC } { DrawFlatPathArray fpc 1 gt { flatPathArray flatPathArray fpc 2 sub get 0 exch put flatPathArray flatPathArray fpc 1 sub get 1 exch put /fpc 2 def }{ /fpc 0 def } ifelse segmentArray length 512 lt { flatPathArray fpc segmentArray putinterval segmentArray length IncFPC } { segmentArray length /exitLoop false def 0  { 2 copy sub dup 500 gt { pop 500 } {  /exitLoop true def } ifelse  segmentArray 2 index 2 index getinterval flatPathArray fpc 3 -1 roll putinterval dup IncFPC add  exitLoop { exit  } { DrawFlatPathArray fpc 1 gt { flatPathArray flatPathArray fpc 2 sub get 0 exch put flatPathArray flatPathArray fpc 1 sub get 1 exch put /fpc 2 def }{ /fpc 0 def } ifelse } ifelse } loop } ifelse } ifelse } if } ifelse } for fpc 0 gt { usingClosepath { AppendClosePath } if DrawFlatPathArray } if saveFlat setflat} bind def%%EndProloginitmsaverestore/tctm matrix currentmatrix deftctm RoundMatrix setmatrix/patternMatrix mstore def10 setmiterlimit2 setlinecapnewpath%%tLayer%%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginOval/RT {E} def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PC { /setcmykcolor where {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def1.000 0 93.543 28.346 0.000 0.000 19.842 59.527 rect%@EndOval%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginOval/RT {E} def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PC { /setcmykcolor where {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def1.000 0 93.543 246.614 0.000 0.000 19.842 51.023 rect%@EndOval%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginOval/RT {E} def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PC { /setcmykcolor where {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def1.000 0 170.078 138.897 0.000 0.000 17.007 65.196 rect%@EndOval%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginOval/RT {E} def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PC { /setcmykcolor where {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def1.000 0 8.503 144.566 0.000 0.000 19.842 42.519 rect%@EndOval%@BeginTextsave%%IncludeFont: Helvetica[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron]StandardEncoding Re-encode /_Helvetica /Helvetica EncodeFont%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 13.314 150.314 0.000 0.000 14.000 30.017 rect%@EndRectgsave165.323 20.314 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (b) -14.185 3.000 S(e) -7.511 3.000 S(r) -0.837 3.000 S(e) 3.158 3.000 S(i) 9.832 3.000 S(t) 12.498 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 172.826 144.645 0.000 0.000 14.000 50.039 rect%@EndRectgsave169.665 179.826 T translate0.0 rotate1 1 scale12.000 (_Helvetica) fess /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (r) -24.854 3.000 S(e) -20.858 3.000 S(c) -14.184 3.000 S(h) -8.184 3.000 S(n) -1.510 3.000 S(e) 5.163 3.000 S(n) 11.837 3.000 S(d) 18.510 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 98.503 252.677 0.000 0.000 14.000 43.376 rect%@EndRectgsave274.365 105.503 T translate0.0 rotate1 1 scale12.000 (_Helvetica) fess /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (b) -20.822 3.000 S(e) -14.149 3.000 S(e) -7.475 3.000 S(n) -0.801 3.000 S(d) 5.872 3.000 S(e) 12.546 3.000 S(t) 19.220 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 98.661 39.314 0.000 0.000 14.000 42.691 rect%@EndRectgsave60.660 105.661 T translate0.0 rotate1 1 scale12.000 (_Helvetica) fess /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (w) -21.185 3.000 S(a) -12.519 3.000 S(r) -5.845 3.000 S(t) -1.849 3.000 S(e) 1.484 3.000 S(n) 8.158 3.000 S(d) 14.832 3.000 Sgrestore%@EndText%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth150.236 25.511 moveto/Triangular 14.099 7.049 false 90.006 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 150.236 172.913 150.236 27.511 Line%@EndLine%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth178.582 170.078 moveto/Triangular 14.099 7.049 false -90.006 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 178.582 28.346 178.582 168.078 Line%@EndLine%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth187.086 22.677 moveto/Triangular 14.099 7.049 false 400.792 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 188.601 23.982 269.291 93.543 Line%@EndLine%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth260.787 110.551 moveto/Triangular 14.099 7.049 false 132.406 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 259.438 112.028 201.259 175.748 Line%@EndLine%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth70.866 113.385 moveto/Triangular 14.099 7.049 false 403.810 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 72.310 114.769 138.897 178.582 Line%@EndLine%@BeginRuler%@  2.8346456692913384320e+0 viewScale%@  3.5277777777777780120e-1 realScale%@ 1 realDivs%@ 0303 rulerFormat%@EndRuler%@BeginLine/ArrowType{ 1.000 setlinewidth147.401 22.677 moveto/Triangular 14.099 7.049 false 139.246 DrawArrowHead} bind def/SD {} def/SS {setlinewidth SD stroke} def/LC { /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse } def/PF {gsave fill grestore} def/SS {setlinewidth SD stroke} def1.000 145.886 23.983 65.196 93.543 Line%@EndLine%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 36.496 217.811 0.000 0.000 14.000 72.023 rect%@EndRectgsave253.822 43.496 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -36.188 5 -5.177 5 U(s) -35.688 3.000 S(t) -29.688 3.000 S(a) -26.354 3.000 S(r) -19.681 3.000 S(t) -15.685 3.000 S(e) -12.351 3.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse ( ) -5.677 3.000 S(P) -2.343 3.000 S(r) 5.660 3.000 S(o) 9.656 3.000 S(z) 16.330 3.000 S(e) 22.330 3.000 S(ß) 29.004 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 39.330 44.897 0.000 0.000 14.000 64.025 rect%@EndRectgsave76.910 46.330 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -32.102 5 -9.088 5 U(l) -31.602 3.000 S(ö) -28.936 3.000 S(s) -22.262 3.000 S(e) -16.262 3.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse ( ) -9.588 3.000 S(P) -6.254 3.000 S(r) 1.749 3.000 S(o) 5.745 3.000 S(z) 12.419 3.000 S(e) 18.419 3.000 S(ß) 25.092 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 146.070 227.610 0.000 0.000 14.000 82.054 rect%@EndRectgsave268.637 153.070 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -41.389 5 -0.346 5 U(b) -40.889 3.000 S(e) -34.215 3.000 S(e) -27.542 3.000 S(n) -20.868 3.000 S(d) -14.194 3.000 S(e) -7.520 3.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse ( ) -0.846 3.000 S(P) 2.487 3.000 S(r) 10.491 3.000 S(o) 14.487 3.000 S(z) 21.161 3.000 S(e) 27.161 3.000 S(ß) 33.834 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 148.905 20.681 0.000 0.000 14.000 90.035 rect%@EndRectgsave65.698 155.905 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -45.318 5 3.704 5 U(b) -44.818 3.000 S(l) -38.144 3.000 S(o) -35.478 3.000 S(c) -28.805 3.000 S(k) -22.805 3.000 S(i) -16.805 3.000 S(e) -14.139 3.000 S(r) -7.465 3.000 S(e) -3.469 3.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse ( ) 3.204 3.000 S(P) 6.538 3.000 S(r) 14.542 3.000 S(o) 18.538 3.000 S(z) 25.212 3.000 S(e) 31.212 3.000 S(ß) 37.886 3.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 78.039 94.381 0.000 0.000 27.000 55.685 rect%@EndRectgsave122.224 91.539 T translate0.0 rotate1 1 scale12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -27.618 -2 27.417 -2 U(v) -27.118 -4.000 S(e) -21.118 -4.000 S(r) -14.444 -4.000 S(d) -10.448 -4.000 S(r) -3.774 -4.000 S(ä) 0.221 -4.000 S(n) 6.895 -4.000 S(g) 13.569 -4.000 S(e) 20.243 -4.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse ( ) 26.917 -4.000 S /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (P) -27.118 9.000 S(r) -19.114 9.000 S(o) -15.118 9.000 S(z) -8.444 9.000 S(e) -2.444 9.000 S(ß) 4.229 9.000 Sgrestore%@EndText%@BeginText%@BeginRect/RT {SR} def/LC {} def/SS {pop} def/PF {} def/PC {} def0.000 0 73.661 181.811 0.000 0.000 27.000 54.017 rect%@EndRectgsave208.819 87.161 T translate0.0 rotate1 1 scale12.000 (_Helvetica) fess /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse (P) -26.688 -3.000 S(r) -18.685 -3.000 S(o) -14.688 -3.000 S(z) -8.015 -3.000 S(e) -2.015 -3.000 S(s) 4.658 -3.000 S(s) 10.658 -3.000 S(o) 16.658 -3.000 S(r) 23.332 -3.000 S12.000 (_Helvetica) plain F /setcmykcolor where {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse -27.188 12 23.850 12 U(z) -26.688 10.000 S(u) -20.688 10.000 S(o) -14.015 10.000 S(r) -7.341 10.000 S(d) -3.345 10.000 S(n) 3.328 10.000 S(e) 10.002 10.000 S(n) 16.676 10.000 Sgrestore%@EndTextrestore%%Trailerend