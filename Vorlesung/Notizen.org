* Notizen aus

** [[https://www.youtube.com/watch?v=7Zlp9rKHGD4][Bob Martin: Functional Programming; What? Why? When?]
+ 34:34 - fewer concurrency issues
  + purely functional languages: no concurrency issues
  + side effects make programs unthreadsafe
  + in functional programs there are isolated portions of the program, where assignments are made
  + Umgang mit race conditions: reboot
+ 36:12 - Moore's law
  + [[file:./Abbildungen/CPU-Moore.png]]
  + immer mehr Rechenkerne in den Computern
  + die einzelnen Rechenkerne werden langsamer
  + der Durchsatz des Chips wird höher, falls man die vielen Kerne nutzen kann
+ 39:30 - multi-threaded code
  + das BS teilt den threads Prozesse zu und entscheidet, wann (und wo) sie laufen dürfen
  + um Kerne für Anwendungsprogrammierung nutzen zu können, braucht es
    Mechanismen für simultane Ausführung; das BS kümmert sich um
    concurrent execution
  + jetzt müssen sich Programmierer darum kümmern, wie sich viele
    Kerne um den Bus (und den Speicher) streiten
  + einzige Chance damit klarzukommen: Aufgeben der Zuweisung
  + =assertEquals(f(x), f(x));=: wenn =f(x)= funktional ist, spielt es
    keine Rolle, ob beide Aufrufe auf einem oder mehreren Prozessen
    ausgeführt werden.
  + „plötzlich” werden funktionale Sprachen wichtig
+ 46:55 - Lisp / Clojure
  + Clojure: keine Zuweisungen ohne Transaktionen
+ 49:50 OO = procedure + state
+ 55:00: Richtiger Umgang mit locking erfordert übermächtige
  Fähigkeiten

** [[https://www.youtube.com/watch?v=-6BsiVyC1kM][The Value of Values with Rich Hickey]]
+ 03:14: mutable objects are nothing more than abstractions over places
  + PLOP: Grund: kleine Speicher
+ 10:50: Werte (values) sind „von Natur aus” nicht änderbar (mutable)
  + values can be shared
  + reproducible results
  + easy to fabricate
  + language independent
  + generic
  + values aggregate to values
  + ... easy to convey
  + problemlose Wahrnehmung von Werten
  + Wahrnehmung von places sehr problemtisch: man muss die Welt anhalten
  + 
+ 20:08: Facts are Values
  + not places
  + dont change (they incorp. time)
  + something known to have happened or existed
  + knowledge is derived from facts ...
  + especially from different time points
  + Fakten können nicht verändert werden, weil an die Vergangenheit
    nicht ändern kann
+ 22:28: Information systems
  + basieren auf Fakten
+ 25:00 Wie arbeiten Programmierer: mit Code-Repositories,
  Vergangenheit bleibt erhalten
** [[https://www.youtube.com/watch?v=nDAfZK8m5_8][Clojure Concurrency - Rich Hickey]]
+ 21:38: mutable objects
  + new spaghetti code
  + concurrency disaster
+ 27:20: Definition von Concurrency
  + Clojure isn't a *parallel* programming language
+ 29:38: explicit locks
  + problem: readers block readers
+ 33:03: enhancing reader parallelism
** Bengel Masterkurs
*** Vorwort
+ bisherige Nische des Hochleistungsrechnens
+„It appears to be easier to build parallel machines than to use
them.“
„The concurrency revolution is primarily a software revolution. The difficult problem
is not building multicore hardware, but programming it in a way that lets mainstream application benefit from the continued exponential growth in CPU performance.“

* weitere Notizen
** behandeln:
+ Prozessorarchitekturen
  + multi core
  + multi threading
  + hypertrheading
  + Vektorrechner
    + Historie
    + SIMD und Co

